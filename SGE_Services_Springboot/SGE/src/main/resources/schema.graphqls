input CreateAlumnoInput {
    id_alumno: ID,
    no_control: String,
    correo: String,
    curp: String,
    nombre: String,
    fecha_nacimiento: String,
    telefono: String,
    sexo: String,
    fotografia: String
}

type Alumno {
    id_alumno: ID!,
    no_control: String,
    correo: String,
    curp: String,
    nombre: String,
    fecha_nacimiento: String,
    telefono: String,
    sexo: String,
    fotografia: String,
    domicilio: Domicilio
}

type Asignatura {
    id: ID!,
    asignatura: String,
    clave: String,
    grupo: String,
    creditos: String,
    semestre: Int,
    semestre_cursada: Int,
    horario_lunes: String,
    horario_martes: String,
    horario_miercoles: String,
    horario_jueves: String,
    horario_viernes: String,
    aula_lunes: String,
    aula_martes: String,
    aula_miercoles: String,
    aula_jueves: String,
    aula_viernes: String,
    calificacion: Int,
    regularizacion: String,
    evaluacion: String,
    observaciones: String

}

input CreateDomicilioInput {
    id: ID!,
    domicilio: String,
    id_colonia: Int
}

type Domicilio {
    id: ID!,
    domicilio: String,
    id_colonia: Int
}

type Query {
    listAlumnos:[Alumno]
    loadAlumno(id_alumno:ID):Alumno
    listDomicilios:[Domicilio]
    loadDomicilio(id_domicilio:ID):Domicilio
    listAsignaturas:[Asignatura]
    loadAsignatura(id_asignatura:ID):Asignatura
}

type Mutation {
    saveAlumnoQL(input: CreateAlumnoInput): Alumno
    updateAlumno(id: ID, telefono: String, domicilio: CreateDomicilioInput): Alumno
    removeAlumno(id_alumno:ID): Boolean
}
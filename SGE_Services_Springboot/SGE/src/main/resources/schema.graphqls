type Alumno {
    id: ID!,
    no_control: String,
    correo: String,
    curp: String,
    nombre: String,
    fecha_nacimiento: String,
    telefono: String,
    sexo: String,
    fotografia: String,
    contrasena: String,
    residencia: Residencia
}

type Asignatura {
    id: ID!,
    asignatura: String,
    clave: String,
    creditos: String,
    semestre: Int,
    semestre_cursada: Int,
    calificacion: Int,
    regularizacion: String,
    evaluacion: String,
    observaciones: String
}

type Grupo {
    id:ID!,
    grupo: String,
    horario_lunes: String,
    horario_martes: String,
    horario_miercoles: String,
    horario_jueves: String,
    horario_viernes: String,
    aula_lunes: String,
    aula_martes: String,
    aula_miercoles: String,
    aula_jueves: String,
    aula_viernes: String,
    asignatura: Asignatura,
    profesor: Profesor
}

type Profesor {
    id: ID!
    nombre: String
}

type Residencia {
    id: ID!,
    domicilio: String,
    colonia: Colonia,
    municipio: Municipio,
    estado: Estado
}

type Colonia {
    id: ID!,
    colonia: String,
    codigo_postal: String,
    municipio: Municipio
}

type Municipio {
    id: ID!,
    municipio: String,
    estado: Estado
}

type Estado {
    id: ID!,
    estado: String
}

input CreateAlumnoInput {
    no_control: String,
    correo: String,
    curp: String,
    nombre: String,
    fecha_nacimiento: String,
    telefono: String,
    sexo: String,
    fotografia: String,
    contrasena: String,
    residencia: CreateResidenciaInput
}

input CreateProfesorInput {
    nombre: String
}

input CreateColoniaInput {
    colonia: String,
    codigo_postal: String
}

input CreateMunicipioInput {
    municipio: String,
}

input CreateEstadoInput {
    estado: String
}

input CreateResidenciaInput {
    domicilio: String,
    colonia: CreateColoniaInput,
    municipio: CreateMunicipioInput,
    estado: CreateEstadoInput
}

type Query {
    validateUser(email: String, password: String): Alumno
    listAlumnos:[Alumno]
    loadAlumno(id_alumno:ID):Alumno
    listProfesores:[Profesor]
    loadProfesor(id_profesor:ID):Profesor
    listAsignaturas:[Asignatura]
    loadAsignatura(id_asignatura:ID):Asignatura
    listResidencias:[Residencia]
    loadResidencia(id_residencia:ID):Residencia
    getResidencia(id_alumno: String): Residencia
    listColonias:[Colonia]
    listMunicipios:[Municipio]
    listEstados:[Estado]
    listGrupos:[Grupo]
    loadGrupo(idGrupo: Int):Grupo
}

type Mutation {
    registerUser(input: CreateAlumnoInput): Alumno
    updateAlumno(id: ID, telefono: String, residencia: CreateResidenciaInput): Alumno
    removeAlumno(id_alumno:ID): Boolean
}